---
title: "Intro R"
author: "tiago.afonso@ubi.pt"
format: html
editor: visual
---

## Intro R

Instalar R e R studio pela ordem:

1.  Download do R em: <https://cran.r-project.org/bin/windows/base/>

2.  Download R-studio em: <https://posit.co/download/rstudio-desktop/>

O R-studio é apenas uma interface gráfica para a linguagem R.

## Executar Código

O R base tem algumas funções incluidos que já permitem executar algumas tarefas. Existem duas forma de introduzir código no R-studio. Uma é diretamente na consola (painel inferior esquerdo no R-Studio) ou

Para executar um comando na consola apenas é necessário pressionar `enter` e no script é necessário ter o cursor na linha a executar (em qualquer posição) e pressionar `ctrl` + `enter` . Para executar mais do que uma linha é necessário selecionar as linhas a executar e pressionar `ctrl` + `enter` .

O R funciona como uma calculadora, um exemplo básico:

```{r}
1 + 1
```

Mais exemplos:

```{r}

2 * 2
3+(1-2)
```

É possível fazer atribuições, para isso utiliza-se o símbolo `<-` , como no exemplo:

```{r}
a <- 2
b <- 3
```

O comando anterior vai gerar dois valores para os objetos `a` e `b` que vão ficar visíveis no ambiente (painel superior direito do R-Studio). Se já existir um objeto com o mesmo nome, o R apenas vai substituir o anterior sem qualquer aviso. O comando `remove` ou `rm` eliminar um objeto do ambiente.

```{r}
rm(a)
```

Para eliminar **todos** os objetos do ambiente R é necessário utilizar uma lista dentro da função `rm`

```{r}
rm(list=ls())
```

Sempre que que se inicia um novo projeto é recomendável a execução do código anterior para não gerar entropia na execução de novo código.

## Comentários - `#`

Os comentários são úteis e quase obrigatórios, pois permitem documentar código. É usual em `R` e noutras linguagens, fornecer um comentário mais geral antes de qualquer código e comentário à frente do código para comentário mais específicos. Em R para introduzir um comentário utiliza-se o `#` .

```{r}
#atribuir valores a objetos
a <- 5
b <- 7

c <- 6 #atribuir o valor 6 ao objeto b
```

Quando se executa um `#comentário` nada acontece, nenhum erro é apresentado, nem é efetuada qualquer execução em Background.

## "*Packages*"

O `R` incluí algumas funções que permitem efetuar análises mais básicas, contudo existe uma grande comunidade que desenvolve bibliotecas adicionais que ajudam maximizar e a facilitar a utilizar do `R`. Para instalar um `package` utiliza-se a função `install.packages("nome do package") como por exemplo:
```{r}
#install.packages("Gally")
```
A mesma função pode ser utilizada para atualzar os bibliotecas já existentes. É possível instalar ou atualizar vários packages em simultâneo com a mesma função utilizando o  `c` (combinar vetores ou listas):
```{r}
#install.packages(c("tidyverse","woolddridge","AER"))
```
Para carregar uma biblioteca é necessário utilizar a função 
```{r}
library(tidyverse) #manipular dados + gráficos
library(AER) #Applied Econometrics with R
library(MASS)
library(scales)
library(stargazer)
library(lmtest) #test lm
library(sandwich)
library(nlme)
library(skedastic) #heterocedasticidade
library(tseries) #séries temporais
library(wooldridge) #livro wooldridge
library(readxl) #importar ficheiro excel xlsx
library(performance) #avaliar modelos
```

O `?` pode e deve ser utilziado para mostrar a sintaxe das função e pode ser utilziado da seguinte forma:
```{r}
?lm
```
Por vezes existem funções com o mesmo nome em bibliotecas diferentes, por exemplo a função `filter` existe na biblioteca do `R` base e na blioteca `dplyr`, utilizar ou aceder ao ficheiro help dasta função é necessária a utilização do nome da biblioteca +`::`+função
```{r}
?dplyr::filter
```

## Pasta Diretório

A pastea diretório é utilizada por defeito em qualquer função que importe ou exporte objetos do `R`, para ver a pasta diretório
```{r}
#View working directory
getwd()
```
Por defeito a pasta dos Documentos é utilizada como pasta diretório em casa sessão do `R`. Uma boa prática é criar uma nova pasta para cada projeto. Por exemplo criar uma pasta "Projeto1" dentro da pasta documentos e depois atribuir essa pasta como diretório:
```{r}
#set up working directory
#setwd("C:/Users/User/Documents/Projeto1")
```
O caminho da pasta é indicaco pot `/` ou por `\\` e nunca por `\`.

O ficheiro a importar para o R deve estar dentro da pasta diretório e com isto


falar de funções com e sem diretório na importação e exportação

